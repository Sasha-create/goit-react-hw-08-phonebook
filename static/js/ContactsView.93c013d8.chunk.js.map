{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","fadeModules/fadeContactFormAlert.module.css","fadeModules/fadeContactList.module.css","components/Filter/Filter.module.css","views/ContactsView/ContactsView.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.js","components/ContactList/ContactLis.js","components/Filter/Filter.js","views/ContactsView/ContactsView.js"],"names":["module","exports","INITIAL_STATE","number","name","alert","message","ContactForm","state","handleInputChange","e","target","value","setState","handleSubmit","preventDefault","onSubmit","props","validateForm","resetForm","contacts","setTimeout","isExistContact","find","contact","this","CSSTransition","in","timeout","classNames","fadeAlert","unmountOnExit","className","s","form","sectionName","label","inputTitle","input","type","onChange","sectionNumber","button","Component","connect","contactsSelectors","getAllContacts","dispatch","contactsOperations","addContact","ContactListItem","id","onRemove","contactListItem","contactName","onClick","buttonTitle","getVisibleContacts","contactId","removeContact","TransitionGroup","component","contactList","map","fadeStyles","filter","getFilter","contactsActions","filterInput","App","fetchContacts","Container","page","appear","phoneBookTitle","findContacts","findContactsTitle","ContactLis","isLoadingContacts","getLoading"],"mappings":"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","file":"static/js/ContactsView.93c013d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2ioIw\",\"contactListItem\":\"ContactList_contactListItem__3kl15\",\"button\":\"ContactList_button__z1iWR\",\"buttonTitle\":\"ContactList_buttonTitle__17ohC\",\"contactName\":\"ContactList_contactName__2Crd8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3wEqp\",\"sectionName\":\"ContactForm_sectionName__16pwh\",\"sectionNumber\":\"ContactForm_sectionNumber__2VceD\",\"label\":\"ContactForm_label__38p9L\",\"input\":\"ContactForm_input__wLxqd\",\"inputTitle\":\"ContactForm_inputTitle__2DuSK\",\"button\":\"ContactForm_button__2OIjw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fadeContactFormAlert_enter__HrcyI\",\"enterActive\":\"fadeContactFormAlert_enterActive__35dT9\",\"exit\":\"fadeContactFormAlert_exit__29Wjk\",\"exitActive\":\"fadeContactFormAlert_exitActive__2TN5P\",\"alert\":\"fadeContactFormAlert_alert__2hZkS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fadeContactList_enter__390s5\",\"enterActive\":\"fadeContactList_enterActive__2hF3e\",\"exit\":\"fadeContactList_exit__S-Q2v\",\"exitActive\":\"fadeContactList_exitActive__3AUXD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__3HzaO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"ContactsView_page__NXyby\",\"phoneBookTitle\":\"ContactsView_phoneBookTitle__3hpWI\",\"findContacts\":\"ContactsView_findContacts__3Vrc7\",\"findContactsTitle\":\"ContactsView_findContactsTitle__36o-P\",\"appear\":\"ContactsView_appear__iyIxe\",\"appearActive\":\"ContactsView_appearActive__2CZlx\"};","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\nimport fadeAlert from '../../fadeModules/fadeContactFormAlert.module.css';\nimport { CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\n\nconst INITIAL_STATE = {\n  number: '',\n  name: '',\n  alert: false,\n  message: '',\n};\n\nclass ContactForm extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = INITIAL_STATE;\n\n  handleInputChange = e => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const { onSubmit } = this.props;\n    const isValidateForm = this.validateForm();\n\n    if (!isValidateForm) return;\n\n    onSubmit(name, number);\n    this.resetForm();\n  };\n\n  validateForm = () => {\n    const { name, number } = this.state;\n    const { contacts } = this.props;\n\n    if (!name || !number) {\n      this.setState({ alert: true, message: 'Some field is empty' });\n      setTimeout(() => this.setState({ alert: false, message: '' }), 2000);\n      return;\n    }\n\n    const isExistContact = !!contacts.find(contact => contact.name === name);\n\n    isExistContact &&\n      this.setState({ alert: true, message: 'This contact already exists' });\n    setTimeout(() => this.setState({ alert: false, message: '' }), 2000);\n    return !isExistContact;\n  };\n\n  resetForm = () => {\n    this.setState(INITIAL_STATE);\n  };\n\n  render() {\n    const { name, number, alert, message } = this.state;\n    return (\n      <>\n        <CSSTransition\n          in={alert}\n          timeout={250}\n          classNames={fadeAlert}\n          unmountOnExit\n        >\n          <p className={fadeAlert.alert}>{message}</p>\n        </CSSTransition>\n        <form className={s.form} onSubmit={this.handleSubmit}>\n          <section className={s.sectionName}>\n            <label className={s.label}>\n              <p className={s.inputTitle}>Name</p>\n              <input\n                className={s.input}\n                type=\"text\"\n                value={name}\n                name=\"name\"\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </section>\n          <section className={s.sectionNumber}>\n            <label className={s.label}>\n              <p className={s.inputTitle}>Number</p>\n              <input\n                className={s.input}\n                type=\"tel\"\n                value={number}\n                name=\"number\"\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </section>\n          <button className={s.button} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getAllContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) =>\n    dispatch(contactsOperations.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import s from './ContactList.module.css';\n\nconst ContactListItem = ({ id, name, number, onRemove }) => {\n  return (\n    <li className={s.contactListItem}>\n      <span className={s.contactName}>\n        {name}: {number}{' '}\n      </span>\n\n      <button className={s.button} onClick={() => onRemove(id)}>\n        <p className={s.buttonTitle}>delete</p>\n      </button>\n    </li>\n  );\n};\n\nexport default ContactListItem;\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nimport fadeStyles from '../../fadeModules/fadeContactList.module.css';\nimport ContactListItem from './ContactListItem';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { contactsSelectors, contactsOperations } from '../../redux/contacts';\n\nconst ContactsList = ({ contacts, onRemove }) => {\n  return (\n    <TransitionGroup component=\"ul\" className={s.contactList}>\n      {contacts.map(contact => (\n        <CSSTransition key={contact.id} timeout={250} classNames={fadeStyles}>\n          <ContactListItem {...contact} onRemove={onRemove} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemove: contactId => dispatch(contactsOperations.removeContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\nimport { contactsSelectors } from '../../redux/contacts';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <div className={s.filter}>\n      <input\n        className={s.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={({ target }) => onChange(target.value)}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport Container from '../../components/Container';\n\nimport ContactForm from '../../components/ContactForm';\nimport ContactList from '../../components/ContactList';\nimport Filter from '../../components/Filter';\nimport s from './ContactsView.module.css';\nimport {\n  contactsOperations,\n  contactsSelectors,\n} from '../../redux/contacts/index';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <Container className={s.page}>\n        <div className={s.page}>\n          <CSSTransition\n            in={true}\n            appear={true}\n            timeout={500}\n            classNames={s}\n            unmountOnExit\n          >\n            <h1 className={s.phoneBookTitle}>Phonebook</h1>\n          </CSSTransition>\n          {/* {this.props.isLoadingContacts && (\n            <h3 className={s.loading}>Loading...</h3>\n          )} */}\n          <ContactForm />\n          <div className={s.findContacts}>\n            <h2 className={s.findContactsTitle}>Find contacts</h2>\n            <Filter />\n          </div>\n          <ContactList />\n        </div>\n      </Container>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"],"sourceRoot":""}